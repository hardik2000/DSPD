/*
 ============================================================================
 Name        : Spiral_Tree.c
 Author      : Hardik
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
typedef enum{FAILURE,SUCCESS} status_code;
typedef enum{false,true} boolean;


typedef struct Tree_Node_Tag
{
	int data;
	struct Tree_Node_Tag * left;
	struct Tree_Node_Tag * right;

}Tree_Node;

typedef Tree_Node* item_type;

typedef struct Node
{
	item_type data;
	struct Node * next;
}node;

typedef struct stack_tag
{
	node * top;
}stack;
void Initialise(stack *sptr)
{
	sptr->top=NULL;
}
struct Node * CreateNode(item_type data)
{
	struct Node *ptr;
	ptr=(struct Node *)malloc(sizeof(struct Node));
	ptr->data=data;
	ptr->next=NULL;
	return ptr;
}
status_code push(stack *sptr,item_type x)
{
	status_code retval=SUCCESS;
	node * nptr=CreateNode(x);

	if(nptr==NULL)
	{
		retval=FAILURE;
		printf("STACK OVERFLOW\n");
	}
	else
	{
		nptr->next=sptr->top;
		sptr->top=nptr;
	}
	return retval;
}
status_code IsEmpty(stack *sptr)
{
	status_code sc=FAILURE;
	if(sptr->top==NULL)
	{
		sc=SUCCESS;

	}

	return sc;
}

status_code pop(item_type *x,stack * sptr)
{
	status_code retval=SUCCESS;
	node * ptr;
	if(IsEmpty(sptr))
	{
		retval=FAILURE;
	}
	else
	{
		ptr=sptr->top;
		*x=ptr->data;
		sptr->top=(sptr->top)->next;
		free(ptr);
	}
	return retval;
}

Tree_Node * Insert_recursion(Tree_Node * root,Tree_Node *node)
{
	if(root==NULL)
	{
		root=node;
	}
	else
	{
		if(root->data <node->data)
		{
			root->right=Insert_recursion(root->right,node);
		}
		else
		{
			root->left=Insert_recursion(root->left,node);
		}
	}

	return root;
}

void printSpiralOrder(Tree_Node* root)
{
	stack sptr1,sptr2;
	Initialise(&sptr1);
	Initialise(&sptr2);
	Tree_Node *temp = root;
	int flag=1;
	while (temp!=NULL)
	{
		printf("%d ", temp->data);

		if(flag==0)
		{
			/*Enqueue left child */
			if (temp->left!=NULL)
			{
				push(&sptr1,temp->left);
			}


			/*Enqueue right child */
			if (temp->right!=NULL)
			{
				push(&sptr1,temp->right);
			}

			/*Dequeue node and make it temp_node*/
			pop(&temp,&sptr1);
			if(IsEmpty(&sptr1))
			{
				if(flag==0)
				{
					flag=1;
				}
				else if(flag==1)
				{
					flag=0;
				}
			}
		}
		else if(flag==1)
		{
			/*Enqueue left child */
			if (temp->right!=NULL)
				push(&sptr,temp->right);

			/*Enqueue right child */
			if (temp->left!=NULL)
				push(&sptr,temp->left);

			/*Dequeue node and make it temp_node*/
			pop(&temp,&sptr);
			if(IsEmpty(&sptr))
			{
				if(flag==0)
				{
					flag=1;
				}
				else if(flag==1)
				{
					flag=0;
				}
			}
		}
	}
}


int main(void)
{
	int value;
	Tree_Node *root,*node;
	root=NULL;



	printf("ENTER THE VALUES SERIALLY (PRESS -1 to stop)\n");
	scanf("%d",&value);
	while(value!=-1)
	{
		node=(Tree_Node *)malloc(sizeof(Tree_Node));
		node->data=value;
		root=Insert_recursion(root,node);
		printf("ENTER VALUES\n");
		scanf("%d",&value);
	}

	printf("LEVEL BASED TRAVESRSAL OF BST IS:\n");
	printSpiralOrder(root);


	return 0;
}
