/*
 ============================================================================
 Name        : DSPD_ASSIGN.c
 Author      : Hardik & Suyash
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#define N 5
#define MAX 1000000.00//max diffrence between the station
//-------------------------------------------------------------------------------------------structure for storing records.----------------------------------------------------------------------------------------
	struct station
	{
		char name[10];
		float sky_view_fact;
		float veg_den_ratio;
		float pop_den;
		float per_surf_frac;
		float imper_surf_frac;
		char status[10];
		float dist[N-1];
		float air_temp[30];
		float sum_temp;
		float rel_humid[30];
		int heat_deg_days;
		float max_temp;
	};


//Implicit function declaration
int heatdegreedays(struct station s,int avg_temp_of_all);
void structcopy(struct station a,struct station b);

//main part begins
int main(void)
{
//-----------------------------------------------------------------------------creation of structure for N no of stations:-----------------------------------------------------------------------------------------
	struct station s[N],temp;
	int i;

//--------------------------------------------------------------------------------------------Inputing of Data------------------------------------------------------------------------------------------------------
/*		//inputting of data and storing in file data.txt
		FILE *ptr;
		// open file for writing
		ptr = fopen ("data.txt", "w+");
		if (ptr == NULL)
		{
			printf("Error opening file\n");
			return (0);
		}
		else
		{
			for(i=0;i<N;i++)
			{

				printf("Enter the name of the station\n");
				scanf("%s",temp.name);

				do
				{
					printf("Enter the sky view factor(0.1 to 0.9):\n");
					scanf("%f",&temp.sky_view_fact);
				}while(temp.sky_view_fact<0.1 || temp.sky_view_fact>0.9);

				do
				{
					printf("Enter the vegetation density ratio(percentage age value):\n");
					scanf("%f",&temp.veg_den_ratio);
				}while(temp.veg_den_ratio<0 || temp.veg_den_ratio>100);

				printf("Enter the population density(no of people per square km):\n");
				scanf("%f",&temp.pop_den);

				do
				{
					printf("Enter the pervious surface fraction(0 to 15):\n");
					scanf("%f",&temp.per_surf_frac);
				}while(temp.per_surf_frac<0 || temp.per_surf_frac>15);

				do
				{
					printf("Enter the impervious surface fraction(0 to 15):\n");
					scanf("%f",&temp.imper_surf_frac);
				}while(temp.imper_surf_frac<0 || temp.imper_surf_frac>15);

				do
				{
					printf("Enter the station status:\n");
					scanf("%s",temp.status);
				}while( !(!strcmp(temp.status,"rural") || !strcmp(temp.status,"urban")) );

				if(N>1)
				{
					printf("Enter the distances of other station from station %d(in KM):\n",i+1);
					for(int j=0;j<N-1;j++)
					{
						scanf("%f",&temp.dist[j]);
					}
				}
				else
				{
					printf("There exist only one station.\n");
				}
				temp.max_temp=0;
				printf("Enter the air temperature for station %d per day:\n",i+1);
				temp.sum_temp=0;
				for(int j=0;j<30;j++)
				{
					scanf("%f",&temp.air_temp[j]);
					temp.sum_temp+=temp.air_temp[j];
					if(temp.air_temp[j]>temp.max_temp)
					{
						temp.max_temp=temp.air_temp[j];
					}
				}

				printf("Enter the relative humidity for station %d per day:\n",i+1);
				for(int j=0;j<30;j++)
				{
					scanf("%f",&temp.rel_humid[j]);
				}


		// write structure to file
				fprintf(ptr,"%s%f%f%f%f%f%s",temp.name,temp.sky_view_fact,temp.veg_den_ratio,temp.pop_den,temp.per_surf_frac,temp.imper_surf_frac,temp.status);
				for(int k=0;k<N-1;k++)
				{
					fprintf(ptr,"%f",temp.dist[k]);
				}
				for(int k=0;k<30;k++)
				{
					fprintf(ptr,"%f",temp.air_temp[k]);
				}
				for(int k=0;k<30;k++)
				{
					fprintf(ptr,"%f",temp.rel_humid[k]);
				}
				fprintf(ptr,"%f%f",temp.sum_temp,temp.max_temp);
			}
		// close file
				fclose (ptr);
		}
*/
//------------------------------------------------------------------------------outputting of  data---------------------------------------------------------------------------------------------
		FILE *rtp;
		// Open data.txt for reading
		rtp = fopen ("data.txt", "r+");
		if (rtp== NULL)
		{
			fprintf(stderr, "\nError opening file\n");
	    }
		else
		{
		    // read file contents till end of file
			for(i=0;i<N;i++)
			{
				fscanf(rtp,"%s%f%f%f%f%f%s",s[i].name,&s[i].sky_view_fact,&s[i].veg_den_ratio,&s[i].pop_den,&s[i].per_surf_frac,&s[i].imper_surf_frac,s[i].status);
				for(int j=0;j<N-1;j++)
				{
					fscanf(rtp,"%f",&s[i].dist[j]);
				}
				for(int j=0;j<30;j++)
				{
					fscanf(rtp,"%f",&s[i].air_temp[j]);
				}
				for(int j=0;j<30;j++)
				{
					fscanf(rtp,"%f",&s[i].rel_humid[j]);
				}
				fscanf(rtp,"%f%f",&s[i].sum_temp,&s[i].max_temp);
			//printing the read data onto the screen
				printf("%d)%s:%f %f %f %f %f %s\n",i,s[i].name,s[i].sky_view_fact,s[i].veg_den_ratio,s[i].pop_den,s[i].per_surf_frac,s[i].imper_surf_frac,s[i].status);
				for(int j=0;j<N-1;j++)
					printf("%f ",s[i].dist[j]);
				printf("\n");
				for(int j=0;j<30;j++)
					printf("%f ",s[i].air_temp[j]);
				printf("\n");
				for(int j=0;j<30;j++)
					printf("%f ",s[i].rel_humid[j]);
				printf("\n");
				printf("%f %f\n",s[i].sum_temp,s[i].max_temp);
			}
		    // close file
		    fclose (rtp);
		}

//---------------------------------------------------------------------------------Main Program Start-----------------------------------------------------------------------------------------
//i)part
	float avg_temp_of_all=0.0;
	int tempintarr[N];
	for(i=0;i<N;i++)
	{
		avg_temp_of_all+=(s[i].sum_temp)/(30.0);
	}
	avg_temp_of_all=(float)(avg_temp_of_all/N);


	//function to calculate heat degree days of the station
	for(i=0;i<N;i++)
	{
		s[i].heat_deg_days=heatdegreedays(s[i],avg_temp_of_all);
	}
	//function to find the max heat degree days
	for(i=0;i<N;i++)
	{
		tempintarr[i]=s[i].heat_deg_days;
	}
	sort(s,tempintarr,30);//merge sort function to sort s array on the basis of temp array in increasing order
	i=N-1;
	do
	{
		printf("\n%s has highest heat degree days i.e. %d\n",s[i].name,s[i].heat_deg_days);
		i--;
	}while(s[i].heat_deg_days==s[i+1].heat_deg_days);

//ii)part

	char search_station[10];
	int searched_station_index;
	printf("Enter the station to be searched out of following:\n");
	for(int j=0;j<N;j++)
	{
		if(!strcmp(s[j].status,"urban") || !strcmp(s[j].status,"Urban"))
		{
			printf("%d : %s\n",j,s[j].name);
		}
	}
	scanf("%s",search_station);
	for(i=0;i<N;i++)
	{
		if(!strcmp(s[i].name,search_station))
		{
			searched_station_index=i;
		}
	}
	struct station rural_near;

	int j=0,k=0,struct_no=-1;
	float min=MAX;
	while(k<N)
	{
		if(searched_station_index!=k)
		{
			if(!strcmp(s[k].status,"rural") || !strcmp(s[k].status,"Rural"))
			{
				if(s[searched_station_index].dist[j]<min)
				{
					min=s[searched_station_index].dist[j];
					struct_no=k;
					structcopy(rural_near,s[k]);//program for copy of  structures
				}
				else if(s[searched_station_index].dist[j]==min)
				{
					if(s[k].per_surf_frac>s[struct_no].per_surf_frac)
					{
						structcopy(rural_near,s[k]);
						struct_no=k;
					}
				}
			}
			j++;
		}
		k++;
	}
	float temp_diff[30];
	i=0;
	while(i<30)
	{
		temp_diff[i]=s[searched_station_index].air_temp[i]-rural_near.air_temp[i];
		i++;
	}
	sort(temp_diff,30);//sort in increasing order
	int count=0;
	i=0;
	do
	{
		count++;
		i++;
	}while(temp_diff[i]==temp_diff[i-1]);

	printf("FOR THE SEARCHED STATION : %s THE NO OF THERMALLY COMFERTABLE DAYS ARE %d. \n",search_station,count);


//iii)part


















//iv)part)

	int temp_pop_array[N],temp_max_temp_array[N];
	printf("ENTER THE VALUE OF K(INPUT):\n");
	scanf("%d",&k);
	i=0;
	while(i<N)
	{
		temp_pop_array[i]=s[i].pop_den;
		temp_max_temp_array[i]=s[i].max_temp;
		i++;
	}

	sort(s,temp_pop_array,temp_max_temp_array,30);                     // program to sort s on the basis of increasing population density and decreasing max temperature


	printf("\nTHE TOP K VALUE ARE:\n");
	i=0;
	while(i<k)
	{
		printf("%s   ---  %f  ---  %f  \n",s[i].name,s[i].pop_den,s[i].max_temp);
	}


//v)part


	while(i<N)
	{
		if(!strcmp(s[i].status,"urban") || !strcmp(s[i].status,"Urban"))
		{
			int j=0,struct_no=-1;
			k=0;
			float min=MAX;
			while(k<N)
			{
				if(i!=k)
				{
					if(!strcmp(s[k].status,"rural") || !strcmp(s[k].status,"Rural"))
					{
						if(s[i].dist[j]<min)
						{
							min=s[i].dist[j];
							struct_no=k;
							structcopy(rural_near,s[k]);//program for copy of  structures
						}
						else if(s[i].dist[j]==min)
						{
							if(s[k].per_surf_frac>s[struct_no].per_surf_frac)
							{
								structcopy(rural_near,s[k]);
							}
						}
					}
					j++;
				}
				k++;
			}
		printf("HEAT ISLAND INTENSITY FOR THE URBAN STATION:%s IS %f .\n",s[i].name,((s[i].sum_temp-rural_near.sum_temp)/30.0));

		}
		i++;
	}

//---------------------------------------------------------------------------main part end's here---------------------------------------------------------------------

	return (0);
}
int heatdegreedays(struct station s,int avg_temp_of_all)
{
	int i,retval=0;
	for(i=0;i<30;i++)
	{
		if(s.air_temp[i]>avg_temp_of_all)
		{
			retval++;
		}
	}


	return retval;
}
void structcopy(struct station a,struct station b)
{
		strcpy(a.name,b.name);
		a.sky_view_fact=b.sky_view_fact;
		a.veg_den_ratio=b.veg_den_ratio;
		a.pop_den=b.pop_den;
		a.per_surf_frac=b.per_surf_frac;
		a.imper_surf_frac=b.imper_surf_frac;
		strcpy(a.status,b.status);
		for(int i=0;i<N-1;i++)
		{
			a.dist[i]=b.dist[i];
		}
		for(int i=0;i<30;i++)
		{
			a.air_temp[i]=b.air_temp[i];
		}
		a.sum_temp=b.sum_temp;
		for(int i=0;i<30;i++)
		{
			a.rel_humid[i]=b.rel_humid[i];
		}
		a.heat_deg_days=b.heat_deg_days;
		a.max_temp=b.max_temp;
}


































