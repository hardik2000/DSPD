/*
 ============================================================================
 Name        : DSPD_ASSIGN.c
 Author      : Hardik & Suyash
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#include<math.h>

#define N 5
#define MAX 1000000.00//max diffrence between the station
//-------------------------------------------------------------------------------------------structure for storing records.----------------------------------------------------------------------------------------
	struct station
	{
		char name[10];
		float sky_view_fact;
		float veg_den_ratio;
		float pop_den;
		float per_surf_frac;
		float imper_surf_frac;
		char status[10];
		float dist[N-1];
		float air_temp[30];
		float sum_temp;
		float rel_humid[30];
		int heat_deg_days;
		float max_temp;
	};


//Implicit function declaration
int heatdegreedays(float [],float avg_temp_of_all);
void sortbig(char name[][10],float temp_pop_array[],float temp_max_temp_array[],int size);
void merge_sort(float temp_veg_den[],int temp_index[],int c[],int l,int h);
void merge_self(float temp_veg_den[],int temp_index[],int l,int m,int n,int c[]);



//main part begins
int main(void)
{
//-----------------------------------------------------------------------------creation of structure for N no of stations:-----------------------------------------------------------------------------------------
	struct station s[N];
	int i;

//--------------------------------------------------------------------------------------------Inputing of Data------------------------------------------------------------------------------------------------------


 	 	 struct station temp;
/*
  	  	//inputting of data and storing in file data.txt
		FILE *ptr;
		// open file for writing
		ptr = fopen ("data.txt", "w+");
		if (ptr == NULL)
		{
			printf("Error opening file\n");
			return (0);
		}
		else
		{
			for(i=0;i<N;i++)
			{

				printf("Enter the name of the station\n");
				scanf("%s",temp.name);

				do
				{
					printf("Enter the sky view factor(0.1 to 0.9):\n");
					scanf("%f",&temp.sky_view_fact);
				}while(temp.sky_view_fact<0.1 || temp.sky_view_fact>0.9);

				do
				{
					printf("Enter the vegetation density ratio(percentage age value):\n");
					scanf("%f",&temp.veg_den_ratio);
				}while(temp.veg_den_ratio<0 || temp.veg_den_ratio>100);

				printf("Enter the population density(no of people per square km):\n");
				scanf("%f",&temp.pop_den);

				do
				{
					printf("Enter the pervious surface fraction(0 to 15):\n");
					scanf("%f",&temp.per_surf_frac);
				}while(temp.per_surf_frac<0 || temp.per_surf_frac>15);

				do
				{
					printf("Enter the impervious surface fraction(0 to 15):\n");
					scanf("%f",&temp.imper_surf_frac);
				}while(temp.imper_surf_frac<0 || temp.imper_surf_frac>15);

				do
				{
					printf("Enter the station status:\n");
					scanf("%s",temp.status);
				}while( !(!strcmp(temp.status,"rural") || !strcmp(temp.status,"urban")) );

				if(N>1)
				{
					printf("Enter the distances of other station from station %d(in KM):\n",i+1);
					for(int j=0;j<N-1;j++)
					{
						scanf("%f",&temp.dist[j]);
					}
				}
				else
				{
					printf("There exist only one station.\n");
				}
				temp.max_temp=0;
				printf("Enter the air temperature for station %d per day:\n",i+1);
				temp.sum_temp=0;
				for(int j=0;j<30;j++)
				{
					scanf("%f",&temp.air_temp[j]);
					temp.sum_temp+=temp.air_temp[j];
					if(temp.air_temp[j]>temp.max_temp)
					{
						temp.max_temp=temp.air_temp[j];
					}
				}

				printf("Enter the relative humidity for station %d per day:\n",i+1);
				for(int j=0;j<30;j++)
				{
					scanf("%f",&temp.rel_humid[j]);
				}


		// write structure to file
				fprintf(ptr,"%s%f%f%f%f%f%s",temp.name,temp.sky_view_fact,temp.veg_den_ratio,temp.pop_den,temp.per_surf_frac,temp.imper_surf_frac,temp.status);
				for(int k=0;k<N-1;k++)
				{
					fprintf(ptr,"%f",temp.dist[k]);
				}
				for(int k=0;k<30;k++)
				{
					fprintf(ptr,"%f",temp.air_temp[k]);
				}
				for(int k=0;k<30;k++)
				{
					fprintf(ptr,"%f",temp.rel_humid[k]);
				}
				fprintf(ptr,"%f%f",temp.sum_temp,temp.max_temp);
			}
		// close file
				fclose (ptr);
		}
*/
//------------------------------------------------------------------------------outputting of  data---------------------------------------------------------------------------------------------
		FILE *rtp;
		// Open data.txt for reading
		rtp = fopen ("data.txt", "r+");
		if (rtp== NULL)
		{
			fprintf(stderr, "\nError opening file\n");
	    }
		else
		{
		    // read file contents till end of file
			for(i=0;i<N;i++)
			{
				fscanf(rtp,"%s%f%f%f%f%f%s",s[i].name,&s[i].sky_view_fact,&s[i].veg_den_ratio,&s[i].pop_den,&s[i].per_surf_frac,&s[i].imper_surf_frac,s[i].status);
				for(int j=0;j<N-1;j++)
				{
					fscanf(rtp,"%f",&s[i].dist[j]);
				}
				for(int j=0;j<30;j++)
				{
					fscanf(rtp,"%f",&s[i].air_temp[j]);
				}
				for(int j=0;j<30;j++)
				{
					fscanf(rtp,"%f",&s[i].rel_humid[j]);
				}
				fscanf(rtp,"%f%f",&s[i].sum_temp,&s[i].max_temp);
//printing the read data onto the screen
			/*	printf("%d)%s:%f %f %f %f %f %s\n",i,s[i].name,s[i].sky_view_fact,s[i].veg_den_ratio,s[i].pop_den,s[i].per_surf_frac,s[i].imper_surf_frac,s[i].status);
				for(int j=0;j<N-1;j++)
					printf("%f ",s[i].dist[j]);
				printf("\n");
				for(int j=0;j<30;j++)
					printf("%f ",s[i].air_temp[j]);
				printf("\n");
				for(int j=0;j<30;j++)
					printf("%f ",s[i].rel_humid[j]);
				printf("\n");
				printf("%f %f\n",s[i].sum_temp,s[i].max_temp);
			*/
			}
		    // close file
		    fclose (rtp);
		}

//---------------------------------------------------------------------------------Main Program Start-----------------------------------------------------------------------------------------
//i)part

	float avg_temp_of_all=0.0;
	int max_count=0;
	for(i=0;i<N;i++)
	{
		avg_temp_of_all+=(s[i].sum_temp)/(30.0);
	}
	avg_temp_of_all=(float)(avg_temp_of_all/N);

/*
	//function to calculate heat degree days of the station
	for(i=0;i<N;i++)
	{
		s[i].heat_deg_days=heatdegreedays(s[i].air_temp,avg_temp_of_all);

	}
	//function to find the max heat degree days

	for(i=1;i<N;i++)
	{
		if(s[i].heat_deg_days>max_count)
		{
			max_count=s[i].heat_deg_days;
		}
	}
	for(i=0;i<N;i++)
	{
		if(s[i].heat_deg_days==max_count)
		{
			printf("\n%s has highest heat degree days i.e. %d\n",s[i].name,s[i].heat_deg_days);
		}
	}

*/
//ii)part

	char search_station[10];
	int searched_station_index=-1;
	do
	{
		printf("Enter the station to be searched out of following:\n");
		for(int j=0;j<N;j++)
		{
			if(!strcmp(s[j].status,"urban") || !strcmp(s[j].status,"Urban"))
			{
				printf("%d : %s\n",j+1,s[j].name);
			}
		}
		scanf("%s",search_station);
		for(i=0;i<N;i++)
		{
			if(!strcmp(s[i].name,search_station))
			{
				searched_station_index=i;
			}
		}
	}while(searched_station_index==-1);
	struct station rural_near;

	int j=0,k=0,struct_no=-1;
	float min=MAX;
	while(k<N)
	{
		if(searched_station_index!=k)
		{
			if(!strcmp(s[k].status,"rural") || !strcmp(s[k].status,"Rural"))
			{
				if(s[searched_station_index].dist[j]<min)
				{
					min=s[searched_station_index].dist[j];
					struct_no=k;
					rural_near=s[k];
				}
				else if(s[searched_station_index].dist[j]==min)
				{
					if(s[k].per_surf_frac>s[struct_no].per_surf_frac)
					{


						//to copy structures,
						/*		strcpy(rural_near.name,s[k].name);
								rural_near.sky_view_fact=s[k].sky_view_fact;
								rural_near.veg_den_ratio=s[k].veg_den_ratio;
								rural_near.pop_den=s[k].pop_den;
								rural_near.per_surf_frac=s[k].per_surf_frac;
								rural_near.imper_surf_frac=s[k].imper_surf_frac;
								strcpy(rural_near.status,s[k].status);
								for(int i=0;i<N-1;i++)
								{
									rural_near.dist[i]=s[k].dist[i];
								}
								for(int i=0;i<30;i++)
								{
									rural_near.air_temp[i]=s[k].air_temp[i];
								}
								rural_near.sum_temp=s[k].sum_temp;
								for(int i=0;i<30;i++)
								{
									rural_near.rel_humid[i]=s[k].rel_humid[i];
								}
								rural_near.heat_deg_days=s[k].heat_deg_days;
								rural_near.max_temp=s[k].max_temp;
							*/




						rural_near=s[k];
						struct_no=k;
					}
				}
			}
			j++;
		}
		k++;
	}
	float temp_dif;
	int dates[30],counter=1;
	min=fabs(s[searched_station_index].air_temp[i]-rural_near.air_temp[i]);
	for(i=1;i<30;i++)
	{
		temp_dif=fabs(s[searched_station_index].air_temp[i]-rural_near.air_temp[i]);
		if(temp_dif==min)
		{
			dates[counter]=i;
			counter++;
		}
		else if(temp_dif<min)
		{
			counter=1;
			dates[0]=i;
		}
	}
	printf("\nFOR THE SEARCHED STATION : %s THE THERMALLY COMFERTABLE DATES ARE :\n",search_station);
	for(i=0;i<counter;i++)
	{
		printf("%2d/OCT/2019 \n",dates[i]);
	}

/*
//iii)part

	float temp_veg_den[N];
	int temp_index[N];
	for(i=0;i<N;i++)
	{
		temp_veg_den[i]=s[i].veg_den_ratio;
		temp_index[i]=i;
	}
	int final_index[N];

	merge_sort(temp_veg_den,temp_index,final_index,0,N-1);

	i=N-1;
	while(i>=0)
	{
		int index=final_index[i];
		printf("Dates for the station with vegetation density %f \n",s[index].veg_den_ratio);
		for(int j=0;j<30;j++)
		{
			if(s[i].air_temp[j]>avg_temp_of_all)
			{
				printf("%d ",j+1);
			}
		}
		printf("\n");
		i--;
	}



//iv)part)
	char name[N][10];
	float temp_pop_array[N],temp_max_temp_array[N];
	printf("ENTER THE VALUE OF K(INPUT):\n");
	scanf("%d",&k);
	i=0;
	while(i<N)
	{
		strcpy(name[i],s[i].name);
		temp_pop_array[i]=s[i].pop_den;
		temp_max_temp_array[i]=s[i].max_temp;
		i++;
	}
	sortbig(name,temp_pop_array,temp_max_temp_array,30);

	printf("\nTHE TOP K VALUE ARE:\n");
	i=0;
	while(i<k)
	{
		printf("%s   ---  %f  ---  %f  \n",s[i].name,s[i].pop_den,s[i].max_temp);
	}


//v)part


	while(i<N)
	{
		if(!strcmp(s[i].status,"urban") || !strcmp(s[i].status,"Urban"))
		{
			int j=0,struct_no=-1;
			k=0;
			float min=MAX;
			while(k<N)
			{
				if(i!=k)
				{
					if(!strcmp(s[k].status,"rural") || !strcmp(s[k].status,"Rural"))
					{
						if(s[i].dist[j]<min)
						{
							min=s[i].dist[j];
							struct_no=k;
							rural_near=s[k];//program for copy of  structures
						}
						else if(s[i].dist[j]==min)
						{
							if(s[k].per_surf_frac>s[struct_no].per_surf_frac)
							{
								structcopy(rural_near,s[k]);
							}
						}
					}
					j++;
				}
				k++;
			}
		printf("HEAT ISLAND INTENSITY FOR THE URBAN STATION:%s IS %f .\n",s[i].name,(fabs( (s[i].sum_temp-rural_near.sum_temp)/30.0) ));

		}
		i++;
	}
*/
//---------------------------------------------------------------------------main part end's here---------------------------------------------------------------------
	return (0);
}
int heatdegreedays(float air_temp[],float avg_temp_of_all)
{
	int i,retval=0;
	for(i=0;i<30;i++)
	{
		if(air_temp[i]>avg_temp_of_all)
		{
			retval=retval+1;
		}
	}


	return retval;
}
void sortbig(char name[][10],float temp_pop_array[],float temp_max_temp_array[],int size)
{
	float temp_pop_den,temp_temp;
	char temp_name[10];
	int i=1,j;
	while(i<N)
	{
		temp_pop_den=temp_pop_array[i];
		temp_temp=temp_max_temp_array[i];
		strcpy(temp_name,name[i]);
		j=i-1;
		while(j>=0 && temp_pop_array[j]>temp_pop_den)
		{
			temp_pop_array[j+1]=temp_pop_array[j];
			strcpy(name[j+1],name[j]);
			temp_max_temp_array[j+1]=temp_max_temp_array[j];
			j--;
		}
		while(j>=0 && temp_pop_array[j]==temp_pop_den)
		{
			if(temp_temp<temp_max_temp_array[j])
			{
				temp_pop_array[j+1]=temp_pop_array[j];
				strcpy(name[j+1],name[j]);
				temp_max_temp_array[j+1]=temp_max_temp_array[j];
				j--;
			}
		}
		temp_pop_array[j+1]=temp_pop_den;
		strcpy(name[j+1],temp_name);
		temp_max_temp_array[j+1]=temp_temp;
		i++;
	}


}

void merge_self(float temp_veg_den[],int temp_index[],int l,int m,int n,int c[])
{
	int temp_arr[N];
	int i,j,k;
	i=k=l;j=m+1;
	while(i<=m && j<=n)
	{
		if(temp_veg_den[i]<temp_veg_den[j])
		{
			temp_arr[k]=temp_veg_den[i];
			c[k]=temp_index[i];k++;i++;
		}
		else
		{
			temp_arr[k]=temp_veg_den[j];
			c[k]=temp_index[j];j++;k++;
		}
	}
	while(i<=m)
	{
		temp_arr[k]=temp_veg_den[i];
		c[k]=temp_index[i];i++;k++;
	}
	while(j<=n)
	{
		temp_arr[k]=temp_veg_den[j];
		c[k]=temp_index[j];j++;k++;
	}
	for(i=l;i<=n;i++)
	{
		temp_veg_den[i]=temp_arr[i];
		temp_index[i]=c[i];
	}
}

void merge_sort(float temp_veg_den[],int temp_index[],int c[],int l,int h)
{
	int mid;
	if(l<h)
	{
		mid=(l+h)/2;
		merge_sort(temp_veg_den,temp_index,c,l,mid);
		merge_sort(temp_veg_den,temp_index,c,mid+1,h);
		merge_self(temp_veg_den,temp_index,l,mid,h,c);
	}
}

