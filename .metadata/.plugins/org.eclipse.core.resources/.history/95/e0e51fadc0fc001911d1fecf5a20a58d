/*
 ============================================================================
 Name        : DSPD_ASSIGN.c
 Author      : Hardik & Suyash
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#define N 1
//-------------------------------------------------------------------------------------------structure for storing records.----------------------------------------------------------------------------------------
	struct station
	{
		char name[10];
		float sky_view_fact;
		float veg_den_ratio;
		float pop_den;
		float per_surf_frac;
		float imper_surf_frac;
		char status[10];
		float dist[N-1];
		float air_temp[30];
		float sum_temp;
		float rel_humid[30];
		int heat_deg_days;

	};
//Implicit function decleration
int heatdegreedays(struct station s,int avg_temp_of_all);

//main part begains
int main(void)
{
//-----------------------------------------------------------------------------creation of structure for N no of stations:-----------------------------------------------------------------------------------------
	struct station s[N],temp;
	int i;

//--------------------------------------------------------------------------------------------Inputing of Data------------------------------------------------------------------------------------------------------
		//inputting of data and storing in file data.txt
		FILE *ptr;
		// open file for writing
		ptr = fopen ("data.txt", "w+");
		if (ptr == NULL)
		{
			printf("Error opening file\n");
			return (0);
		}
		else
		{
			for(i=0;i<N;i++)
			{

				printf("Enter the name of the station\n")
				scanf("%s",temp.name);

				do
				{
					printf("Enter the sky view factor(0.1 to 0.9):\n");
					scanf("%f",&temp.sky_view_fact);
				}while(temp.sky_view_fact<0.1 || temp.sky_view_fact>0.9);

				do
				{
					printf("Enter the vegetation density ratio(percentage age value):\n");
					scanf("%f",&temp.veg_den_ratio);
				}while(temp.veg_den_ratio<0 || temp.veg_den_ratio>100);

				printf("Enter the population density(no of people per square km):\n");
				scanf("%f",&temp.pop_den);

				do
				{
					printf("Enter the pervious surface fraction(0 to 15):\n");
					scanf("%f",&temp.per_surf_frac);
				}while(temp.per_surf_frac<0 || temp.per_surf_frac>15);

				do
				{
					printf("Enter the impervious surface fraction(0 to 15):\n");
					scanf("%f",&temp.imper_surf_frac);
				}while(temp.imper_surf_frac<0 || temp.imper_surf_frac>15);

				do
				{
					printf("Enter the station status:\n");
					scanf("%s",temp.status);
				}while( !(!strcmp(temp.status,"rural") || !strcmp(temp.status,"urban")) );

				if(N>1)
				{
					printf("Enter the distances of other station from station %d(in KM):\n",i+1);
					for(int j=0;j<N-1;j++)
					{
						scanf("%f",&temp.dist[j]);
					}
				}
				else
				{
					printf("There exist only one station.\n");
				}

				printf("Enter the air temperature for station %d per day:\n",i+1);
				temp.sum_temp=0;
				for(int j=0;j<30;j++)
				{
					scanf("%f",&temp.air_temp[j]);
					temp.sum_temp+=temp.air_temp[j];
				}

				printf("Enter the relative humidity for station %d per day:\n",i+1);
				for(int j=0;j<30;j++)
				{
					scanf("%f",&temp.rel_humid[j]);
				}


		// write structure to file
				fprintf(ptr,"%s %f %f %f %f %f %s",temp.name,temp.sky_view_fact,temp.veg_den_ratio,temp.pop_den,temp.per_surf_frac,temp.imper_surf_frac,temp.status);
				fwrite (temp.dist, sizeof(float),N-1,ptr);
				fwrite (temp.air_temp, sizeof(float),30,ptr);
				fwrite (temp.rel_humid, sizeof(float),30,ptr);
				fprintf(ptr,"%f",s[i].sum_temp);
			}
		// close file
				fclose (ptr);
		}

//------------------------------------------------------------------------------outputting of  data---------------------------------------------------------------------------------------------
		FILE *rtp;
		// Open data.txt for reading
		rtp = fopen ("data.txt", "r+");
		if (rtp== NULL)
		{
			fprintf(stderr, "\nError opening file\n");
	    }
		else
		{
		    // read file contents till end of file
			for(i=0;i<N;i++)
			{
				fscanf(rtp,"%s%f%f%f%f%f%s",s[i].name,&s[i].sky_view_fact,&s[i].veg_den_ratio,&s[i].pop_den,&s[i].per_surf_frac,&s[i].imper_surf_frac,s[i].status);
				fread(s[i].dist, sizeof(float),N-1,rtp);
				fread (s[i].air_temp, sizeof(float),30,rtp);
				fread (s[i].rel_humid, sizeof(float),30,rtp);
				fscanf(rtp,"%f",&s[i].sum_temp);
			//printing the read data onto the screen
				printf("%d)%s:%f %f %f %f %f %s\n",i,s[i].name,s[i].sky_view_fact,s[i].veg_den_ratio,s[i].pop_den,s[i].per_surf_frac,s[i].imper_surf_frac,s[i].status));
				for(int j=0;j<N-1;j++)
					printf("%f ",s[i].dist);
				printf("\n");
				for(int j=0;j<30;j++)
					printf("%f ",s[i].air_temp);
				printf("\n");
				for(int j=0;j<30;j++)
					printf("%f ",s[i].rel_humid);
				printf("\n");
				printf("%f\n",s[i].sum_temp);
			}
		    // close file
		    fclose (rtp);
		}

//---------------------------------------------------------------------------------Main Programme Start-----------------------------------------------------------------------------------------
//i)part
	float avg_temp_of_all=0.0;
	int tempintarr[N];
	for(i=0;i<N;i++)
	{
		avg_temp_of_all+=(s[i].sum_temp)/(30.0);
	}
	avg_temp_of_all=(float)(avg_temp_of_all/N);


	//function to calculate heat degree days of the station
	for(i=0;i<N;i++)
	{
		s[i].heat_deg_days=heatdegreedays(s[i],avg_temp_of_all);
	}
	//function to find the max heat degree days
	for(i=0;i<N;i++)
	{
		tempintarr[i]=s[i].heat_deg_days;
	}
	sort(s,tempintarr,30);//merge sort function to sort s array on the basis of temp array in increasing order
	i=N-1;
	do
	{
		printf("\n%s has highest heat degree days i.e. %d\n",s[i].name,s[i].heat_deg_days);
		i--;
	}while(s[i].heat_deg_days==s[i+1].heat_deg_days);

//ii)part

	char search_station[10];
	char searched_station_index;
	printf("Enter the station to be searched out of following:\n");
	for(int j=0;j<N;j++)
	{
		printf("%d)%s\n",j+1,s[j].name);
	}
	scanf("%s",search_station);
	for(i=0;i<N;i++)
	{
		if(!strcmp(s[i].name,search_station))
		{
			searched_station_index=i;
		}
	}
	int tempdistarr[N-1];
	for(i=0;i<N-1;i++)
	{
		tempdistarr[i]=s[i].dist;
	}
	sort(s,tempdistarr,N-1);//merge sort function to sort s array on the basis of dist array in increasing order
	struct








































	return (0);
}
int heatdegreedays(struct station s,int avg_temp_of_all)
{
	int i,retval=0;
	for(i=0;i<30;i++)
	{
		if(s.air_temp[i]>avg_temp_of_all)
		{
			retval++;
		}
	}


	return retval;
}
